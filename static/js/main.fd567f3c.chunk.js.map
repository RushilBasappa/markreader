{"version":3,"sources":["components/Editor/Editor.js","components/Preview/CodeBlock.js","components/Preview/Preview.js","App.js","content.js","serviceWorker.js","index.js"],"names":["Editor","value","setValue","options","autofocus","cursorBlinkRate","lineNumberFormatter","lineNumber","lineNumbers","lineWiseCopyCut","mode","theme","height","onChange","val","CodeBlock","this","props","language","style","dracula","PureComponent","defaultProps","Preview","children","plugins","gfm","className","allowDangerousHtml","renderers","code","App","useState","editorValue","setEditorValue","split","defaultSize","minSize","initialSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NA8BeA,G,gDApBA,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAUvB,OACE,kBAAC,IAAD,CACED,MAAOA,EACPE,QAZY,CACdC,WAAW,EACXC,gBAAiB,IACjBC,oBAAqB,SAACC,GAAD,gBAAmBA,EAAnB,MACrBC,aAAa,EACbC,iBAAiB,EACjBC,KAAM,WACNC,MAAO,WAMLC,OAAO,OACPC,SAAU,SAACC,GAAD,OAASZ,EAASY,Q,oFCpB5BC,E,uKAUM,IAAD,EACqBC,KAAKC,MAAzBC,EADD,EACCA,SAAUjB,EADX,EACWA,MAClB,OACE,kBAAC,IAAD,CAAmBiB,SAAUA,EAAUC,MAAOC,KAC3CnB,O,GAdeoB,iBAAlBN,EAMGO,aAAe,CACpBJ,SAAU,MAaCH,QCRAQ,EAZC,SAAC,GAAe,IAAbtB,EAAY,EAAZA,MACjB,OACE,kBAAC,IAAD,CACEuB,SAAUvB,EACVwB,QAAS,CAACC,KACVC,UAAU,eACVC,oBAAoB,EACpBC,UAAW,CAAEC,KAAMf,MCQVgB,MAdf,WAAgB,IAAD,EACyBC,mBCPpB,4hCDML,mBACNC,EADM,KACOC,EADP,KAEb,OACE,kBAAC,IAAD,CAAWC,MAAM,WAAWC,YAAY,MAAMC,QAAS,KACrD,kBAAC,IAAD,CAAMC,YAAY,MAAMX,UAAU,SAChC,kBAAC,EAAD,CAAQ1B,MAAOgC,EAAa/B,SAAUgC,KAExC,kBAAC,IAAD,CAAMI,YAAY,MAAMX,UAAU,SAChC,kBAAC,EAAD,CAAS1B,MAAOgC,OEFJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fd567f3c.chunk.js","sourcesContent":["import React from \"react\";\nimport CodeMirror from \"react-codemirror\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/mode/python/python\";\nimport \"codemirror/mode/xml/xml\";\nimport \"codemirror/mode/markdown/markdown\";\nimport \"codemirror/theme/monokai.css\";\nimport \"./Editor.css\";\n\nconst Editor = ({ value, setValue }) => {\n  const options = {\n    autofocus: true,\n    cursorBlinkRate: 500,\n    lineNumberFormatter: (lineNumber) => `${lineNumber}|`,\n    lineNumbers: true,\n    lineWiseCopyCut: true,\n    mode: \"markdown\",\n    theme: \"monokai\",\n  };\n  return (\n    <CodeMirror\n      value={value}\n      options={options}\n      height=\"100%\"\n      onChange={(val) => setValue(val)}\n    />\n  );\n};\n\nexport default Editor;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { dracula } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nclass CodeBlock extends PureComponent {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    language: PropTypes.string,\n  };\n\n  static defaultProps = {\n    language: null,\n  };\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <SyntaxHighlighter language={language} style={dracula}>\n        {value}\n      </SyntaxHighlighter>\n    );\n  }\n}\n\nexport default CodeBlock;\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\nimport CodeBlock from \"./CodeBlock\";\n\nconst Preview = ({ value }) => {\n  return (\n    <ReactMarkdown\n      children={value}\n      plugins={[gfm]}\n      className=\"preview-pane\"\n      allowDangerousHtml={true}\n      renderers={{ code: CodeBlock }}\n    />\n  );\n};\n\nexport default Preview;\n","import React, { useState } from \"react\";\nimport SplitPane, { Pane } from \"react-split-pane\";\nimport \"./App.css\";\nimport { Editor, Preview } from \"./components\";\nimport { content } from \"./content\";\n\nfunction App() {\n  const [editorValue, setEditorValue] = useState(content);\n  return (\n    <SplitPane split=\"vertical\" defaultSize=\"50%\" minSize={100}>\n      <Pane initialSize=\"50%\" className=\"h-100\">\n        <Editor value={editorValue} setValue={setEditorValue} />\n      </Pane>\n      <Pane initialSize=\"50%\" className=\"h-100\">\n        <Preview value={editorValue} />\n      </Pane>\n    </SplitPane>\n  );\n}\n\nexport default App;\n","export const content = `# Live demo\n\nChanges are automatically rendered as you type.\n\n* Implements [GitHub Flavored Markdown](https://github.github.com/gfm/)\n* Renders actual, \"native\" React DOM elements\n* Allows you to escape or skip HTML (try toggling the checkboxes above)\n* If you escape or skip the HTML, no \\`dangerouslySetInnerHTML\\` is used! Yay!\n\n## Table of Contents\n\n## HTML block below\n\n<blockquote>\n  This blockquote will change based on the HTML settings above.\n</blockquote>\n\n## How about some code?\n\n\\`\\`\\`js\nvar React = require('react');\nvar Markdown = require('react-markdown');\n\nReact.render(\n  <Markdown source=\"# Your markdown here\" />,\n  document.getElementById('content')\n);\n\\`\\`\\`\n\nPretty neat, eh?\n\n## Tables?\n\n| Feature   | Support |\n| :-------: | ------- |\n| tables    | ✔ |\n| alignment | ✔ |\n| wewt      | ✔ |\n\n## More info?\n\nRead usage information and more on [GitHub](https://github.com/remarkjs/react-markdown)\n\n---------------\n\nA component by [Espen Hovlandsdal](https://espen.codes/)`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}